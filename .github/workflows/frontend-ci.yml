name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'

jobs:
  # 程式碼品質檢查
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint code
        working-directory: ./frontend
        run: npm run lint

      - name: Check formatting
        working-directory: ./frontend
        run: npm run format:check

  # 單元測試
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests
        working-directory: ./frontend
        run: npm run test:run

      - name: Generate coverage report
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  # E2E 測試
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # 建構測試
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, e2e]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Check build size
        working-directory: ./frontend
        run: |
          MAIN_JS_SIZE=$(find dist/assets -name 'main-*.js' -exec du -k {} \; | awk '{print $1}')
          echo "Main JS size: ${MAIN_JS_SIZE}KB"
          if [ $MAIN_JS_SIZE -gt 500 ]; then
            echo "::warning::Main JS bundle is larger than 500KB"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: frontend/dist/
          retention-days: 7

  # 安全性掃描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Run npm audit
        working-directory: ./frontend
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Docker 建構（僅在 main 分支）
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/alleynote-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/alleynote-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 通知
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, security]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Some checks failed!"
          fi
