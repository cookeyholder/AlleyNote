permissions:
    contents: read
name: Continuous Integration

on:
    push:
        branches: [main, develop, feature/*]
    pull_request:
        branches: [main, develop]

jobs:
    tests:
        runs-on: ubuntu-latest
        name: Tests (PHP ${{ matrix.php-versions }})

        strategy:
            fail-fast: false
            matrix:
                php-versions: ["8.4"]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: pdo, sqlite3, json, gd, curl
                  tools: composer, phpunit
                  coverage: xdebug

            - name: Cache Composer packages
              uses: actions/cache@v4
              with:
                  path: backend/vendor
                  key: ${{ runner.os }}-php-${{ matrix.php-versions }}-${{ hashFiles('backend/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php-${{ matrix.php-versions }}-

            - name: Install dependencies
              working-directory: backend
              run: composer install --prefer-dist --no-progress --no-interaction

            - name: Setup SQLite database
              working-directory: backend
              run: |
                  echo "🗄️ 建立測試資料庫..."
                  mkdir -p database
                  touch database/test.sqlite3
                  chmod 666 database/test.sqlite3

            - name: Setup environment configuration
              working-directory: backend
              run: |
                  echo "⚙️ 設定測試環境配置..."
                  # 使用現有的 .env.testing 檔案作為基礎
                  if [ -f ".env.testing" ]; then
                    echo "✅ 使用現有的 .env.testing 配置"
                  else
                    echo "❌ .env.testing 檔案不存在，建立基本配置"
                    cat > .env.testing << 'EOF'
                  APP_NAME=AlleyNote
                  APP_ENV=testing
                  APP_DEBUG=true
                  DB_CONNECTION=sqlite
                  DB_DATABASE=":memory:"
                  JWT_ALGORITHM=HS256
                  JWT_ISSUER=alleynote-api-test
                  JWT_AUDIENCE=alleynote-client-test
                  JWT_ACCESS_TOKEN_TTL=3600
                  JWT_REFRESH_TOKEN_TTL=2592000
                  JWT_SECRET=test-secret-key-for-ci-only
                  EOF
                  fi

            - name: Run Composer Security Audit
              working-directory: backend
              run: |
                  echo "🔍 執行相依套件安全掃描..."
                  composer audit --format=json > security-audit.json || {
                    echo "❌ 發現安全漏洞！"
                    echo "詳細資訊："
                    composer audit
                    echo ""
                    echo "請執行以下指令更新套件："
                    echo "composer update"
                    exit 1
                  }
                  echo "✅ 相依套件安全掃描通過"

            - name: Run code style check
              working-directory: backend
              run: |
                  if [ -f "vendor/bin/php-cs-fixer" ]; then
                    echo "🎨 執行程式碼風格檢查..."
                    composer cs-check
                  else
                    echo "⚠️  PHP-CS-Fixer 未安裝，跳過程式碼風格檢查"
                  fi

            - name: Run static analysis
              working-directory: backend
              run: |
                  if [ -f "vendor/bin/phpstan" ]; then
                    echo "🔬 執行靜態分析..."
                    composer analyse || true
                  else
                    echo "⚠️  PHPStan 未安裝，跳過靜態分析"
                  fi

            - name: Run tests
              working-directory: backend
              run: |
                  if [ -f "vendor/bin/phpunit" ]; then
                    echo "🧪 執行單元測試..."
                    vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
                  else
                    echo "⚠️  PHPUnit 未安裝，跳過測試"
                  fi
